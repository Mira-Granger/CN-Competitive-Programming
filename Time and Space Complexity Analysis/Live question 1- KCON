/*
Question link: https://www.codechef.com/problems/KCON
You are given an array A with size N (indexed from 0) and an integer K. Let's define another array B with size N · K as the array that's formed by concatenating K copies of array A.
For example, if A = {1, 2} and K = 3, then B = {1, 2, 1, 2, 1, 2}.
You have to find the maximum subarray sum of the array B. Fomally, you should compute the maximum value of Bi + Bi+1 + Bi+2 + ... + Bj, where 0 ≤ i ≤ j < N · K.
Constraints:
1 ≤ T ≤ 10
1 ≤ N ≤ 105
1 ≤ K ≤ 105
-106 ≤ Ai ≤ 106 for each valid i

Sample Input 1
2
2 3
1 2
3 2
1 -2 1

Sample Output 1
9
2
*/
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

ll kadane(int arr[], int n){
    ll cursum=0;
    ll maxsum=INT_MIN;
    for(int i=0;i<n;i++){
        cursum+=arr[i];
        if(maxsum<cursum){
            maxsum=cursum;
        }
        if(cursum<0){
            cursum=0;
        }
    }
    return maxsum;
}

ll maxSubarraySum(int arr[], int n, int k){
    ll kadaneSum=kadane(arr,n);
    if(k==1){
        return kadaneSum;
    }
    ll curPrefixSum=0,curSuffixSum=0;
    ll maxPrefixSum=INT_MIN, maxSuffixSum=INT_MIN;
    for(int i=0;i<n;i++){
        curPrefixSum+=arr[i];
        maxPrefixSum=max(curPrefixSum,maxPrefixSum);
    }
    ll totalSum=curPrefixSum;
    for(int i=n-1;i>=0;i--){
        curSuffixSum+=arr[i];
        maxSuffixSum=max(curSuffixSum,maxSuffixSum);
    }
    ll ans;
    if(totalSum<0){
        ans= max(kadaneSum,maxPrefixSum+maxSuffixSum);
    }
    else{
        ans= max(kadaneSum,maxPrefixSum+maxSuffixSum+(totalSum*(k-2)));
        // same output for 
        //ans= maxPrefixSum+maxSuffixSum+(totalSum*(k-2));
    }
    return ans;
}
int main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--){
	    int n,k;
	    cin>>n>>k;
	    int arr[n];
	    for(int i=0;i<n;i++){
	        cin>>arr[i];
	    }
	    cout<<maxSubarraySum(arr,n,k)<<endl;
	}
	return 0;
}
